---
- name: Set up Fleet
  hosts: localhost
  become: yes
  gather_facts: no

  vars:
    headers:
      kbn-version: "8.12.2"
      kbn-xsrf: "kibana"
      Content-Type: "application/json"

  tasks:
    - name: Source environment file, extract secrets, and set variables
      shell: |
        source /opt/lme/lme-environment.env
        set -a
        . {{ playbook_dir }}/extract_secrets.sh -q
        echo "{\"elastic_password\": \"$elastic\", \"local_kbn_url\": \"$LOCAL_KBN_URL\", \"ipvar\": \"$IPVAR\", \"fleet_port\": \"$FLEET_PORT\"}"
      args:
        executable: /bin/bash
      register: env_vars
      changed_when: false
      no_log: true

    - name: Set variables from environment
      set_fact:
        elastic_password: "{{ (env_vars.stdout | from_json).elastic_password }}"
        local_kbn_url: "{{ (env_vars.stdout | from_json).local_kbn_url }}"
        ipvar: "{{ (env_vars.stdout | from_json).ipvar }}"
        fleet_port: "{{ (env_vars.stdout | from_json).fleet_port }}"
      no_log: true

    - name: Debug - Display set variables (comment out in production)
      debug:
        msg: 
          - "local_kbn_url: {{ local_kbn_url }}"
          - "ipvar: {{ ipvar }}"
          - "fleet_port: {{ fleet_port }}"
          - "elastic_password is set: {{ elastic_password | length > 0 }}"
      when: debug_mode | default(false) | bool

    - name: Initialize counter
      set_fact:
        attempt_counter: 0

    - name: Wait for Fleet API to be ready
      block:
        - name: Attempt Fleet API call
          uri:
            url: "{{ local_kbn_url }}/api/fleet/settings"
            method: GET
            user: elastic
            password: "{{ elastic_password }}"
            validate_certs: no
            headers: "{{ headers }}"
            status_code: 200
            return_content: yes
          register: fleet_status
          ignore_errors: yes

        - name: Display Fleet API call details
          debug:
            msg:
              - "Attempt: {{ attempt_counter }}"
              - "URL: {{ fleet_status.url }}"
              - "Status: {{ fleet_status.status | default('N/A') }}"
              - "Status Message: {{ fleet_status.msg | default('N/A') }}"
              - "Response Headers: {{ fleet_status.headers | default({}) | to_nice_json }}"
              - "Response Content: {{ fleet_status.content | default('N/A') | to_nice_json }}"

        - name: Increment counter
          set_fact:
            attempt_counter: "{{ attempt_counter | int + 1 }}"

        - name: Check if max retries reached
          fail:
            msg: "Max retries reached. Fleet API is not ready."
          when: attempt_counter | int >= 60

        - name: Fail to force retry if not successful
          fail:
            msg: "Fleet API not ready, retrying..."
          when: fleet_status.status is not defined or fleet_status.status != 200

      rescue:
        - name: Retry after delay
          wait_for:
            timeout: 10
          when: attempt_counter | int < 60

        - name: Retry Fleet API call
          include_tasks: "{{ playbook_dir }}/scripts/set_fleet.yml"
          when: attempt_counter | int < 60

      until: fleet_status.status is defined and fleet_status.status == 200

    - name: Get CA fingerprint
      command: >
        /nix/var/nix/profiles/default/bin/podman exec -w /usr/share/elasticsearch/config/certs/ca 
        lme-elasticsearch cat ca.crt | openssl x509 -nout -fingerprint -sha256 | cut -d "=" -f 2 | tr -d : | head -n1
      register: ca_fingerprint
      changed_when: false

    - name: Set Fleet server hosts
      uri:
        url: "{{ local_kbn_url }}/api/fleet/settings"
        method: PUT
        user: elastic
        password: "{{ elastic_password }}"
        validate_certs: no
        headers: "{{ headers }}"
        body_format: json
        body:
          fleet_server_hosts: ["https://{{ ipvar }}:{{ fleet_port }}"]
      register: fleet_server_hosts_result
      no_log: false

    - name: Set Fleet default output hosts
      uri:
        url: "{{ local_kbn_url }}/api/fleet/outputs/fleet-default-output"
        method: PUT
        user: elastic
        password: "{{ elastic_password }}"
        validate_certs: no
        headers: "{{ headers }}"
        body_format: json
        body:
          hosts: ["https://{{ ipvar }}:9200"]
      register: fleet_output_hosts_result
      no_log: false

    - name: Set Fleet default output CA trusted fingerprint
      uri:
        url: "{{ local_kbn_url }}/api/fleet/outputs/fleet-default-output"
        method: PUT
        user: elastic
        password: "{{ elastic_password }}"
        validate_certs: no
        headers: "{{ headers }}"
        body_format: json
        body:
          ca_trusted_fingerprint: "{{ ca_fingerprint.stdout }}"
      register: fleet_output_fingerprint_result
      no_log: true

    - name: Set Fleet default output SSL verification mode
      uri:
        url: "{{ local_kbn_url }}/api/fleet/outputs/fleet-default-output"
        method: PUT
        user: elastic
        password: "{{ elastic_password }}"
        validate_certs: no
        headers: "{{ headers }}"
        body_format: json
        body:
          config_yaml: "ssl.verification_mode: certificate"
      register: fleet_output_ssl_result
      no_log: true

    - name: Create Endpoint Policy
      uri:
        url: "{{ local_kbn_url }}/api/fleet/agent_policies?sys_monitoring=true"
        method: POST
        user: elastic
        password: "{{ elastic_password }}"
        validate_certs: no
        headers: "{{ headers }}"
        body_format: json
        body:
          name: "Endpoint Policy"
          description: ""
          namespace: "default"
          monitoring_enabled: ["logs", "metrics"]
          inactivity_timeout: 1209600
      register: endpoint_policy_result
      no_log: true

    - name: Get Endpoint package version
      uri:
        url: "{{ local_kbn_url }}/api/fleet/epm/packages/endpoint"
        method: GET
        user: elastic
        password: "{{ elastic_password }}"
        validate_certs: no
        headers: "{{ headers }}"
      register: endpoint_package_result
      no_log: true

    - name: Create Elastic Defend package policy
      uri:
        url: "{{ local_kbn_url }}/api/fleet/package_policies"
        method: POST
        user: elastic
        password: "{{ elastic_password }}"
        validate_certs: no
        headers: "{{ headers }}"
        body_format: json
        body:
          name: "Elastic Defend"
          description: ""
          namespace: "default"
          policy_id: "{{ endpoint_policy_result.json.item.id }}"
          enabled: true
          inputs:
            - enabled: true
              streams: []
              type: "ENDPOINT_INTEGRATION_CONFIG"
              config:
                _config:
                  value:
                    type: "endpoint"
                    endpointConfig:
                      preset: "EDRComplete"
          package:
            name: "endpoint"
            title: "Elastic Defend"
            version: "{{ endpoint_package_result.json.item.version }}"
      register: elastic_defend_policy_result
      no_log: true

    - name: Display results
      debug:
        var: "{{ item }}"
      loop:
        - fleet_server_hosts_result
        - fleet_output_hosts_result
        - fleet_output_fingerprint_result
        - fleet_output_ssl_result
        - endpoint_policy_result
        - elastic_defend_policy_result