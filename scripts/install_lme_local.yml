---
- name: Setup /opt/lme, check sudo, and configure other required directories/files
  hosts: localhost
  connection: local
  become: no  # Default to no privilege escalation
  vars:
    clone_directory: "{{ clone_dir | default('~/LME') }}"
    install_user: "{{ ansible_user_id }}"

  tasks:
    - name: Expand clone_directory path
      set_fact:
        clone_directory: "{{ clone_directory | expanduser }}"

    - name: Ensure /opt/lme directory exists
      file:
        path: /opt/lme
        state: directory
        owner: "{{ install_user }}"
        group: "{{ install_user }}"
        mode: '0700'
      become: yes

    - name: Check if /opt/lme/lme-environment.env exists
      stat:
        path: "/opt/lme/lme-environment.env"
      register: optenv_file 
      become: yes

    - name: Check if lme-environment.env exists
      stat:
        path: "{{ clone_directory }}/config/lme-environment.env"
      register: env_file

    - name: Fail if lme-environment.env doesn't exist (either in ./config OR /opt/lme)
      fail:
        msg: "lme-environment.env file not found in {{ clone_directory }}/config/. Please copy example.env to lme-environment.env in the config directory and edit it before running this playbook."
      when: 
        -  (not optenv_file.stat.exists) and (not env_file.stat.exists)

    - name: Copy lme-environment.env to /opt/lme (only if it doesn't exist)
      command: "cp {{ clone_directory }}/config/lme-environment.env /opt/lme/lme-environment.env"
      become: yes
      when: not optenv_file.stat.exists

    - name: Set correct permissions for lme-environment.env
      file:
        path: /opt/lme/lme-environment.env
        owner: "{{ install_user }}"
        group: "{{ install_user }}"
        mode: '0600'
      become: yes

    - name: Check sudo setup
      command: sudo -n true
      register: sudo_check
      ignore_errors: yes
      changed_when: false

    - name: Display sudo information
      debug:
        msg: "{{ 'Passwordless sudo is available.' if sudo_check.rc == 0 else 'Sudo will require a password for privileged operations.' }}"

    - name: Ensure sudo access
      command: sudo -n true
      changed_when: false

    - name: Setup /etc/subgid
      lineinfile:
        path: "/etc/subuid"
        line: 'containers:165536:65536'
        create: yes
      become: yes

    - name: Setup /etc/subgid
      lineinfile:
        path: "/etc/subgid"
        line: 'containers:165536:65536'
        create: yes
      become: yes


- name: set service user passwords
  hosts: localhost
  connection: local
  become: no  # Default to no privilege escalation
  vars:
    clone_directory: "{{ clone_dir | default('~/LME') }}"
  tasks:
    #maybe check for each in the shell script below?
    - name: Register a variable, ignore errors and continue
      shell: |
        source /root/.profile 
        podman secret ls | grep -q elastic
      register: result
      become: yes
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Set podman secret passwords
      shell: |
        source /root/.profile 
        password=$(</dev/urandom tr -dc A-Za-z0-9$@#! | head -c30)
        while ! echo -n $password | grep -Eq '[$@#!]+';do password=$(</dev/urandom tr -dc A-Za-z0-9$@#! | head -c30); echo $password;done
        echo -n $password | podman secret create --driver shell --replace "{{ item }}" -
      args:
        executable: /bin/bash
      loop: 
        - elastic
        - kibana_system
        - wazuh_api
        - wazuh
      become: yes
      when: result is failed

- name: Setup Nix
  hosts: localhost
  connection: local
  become: no  # Default to no privilege escalation
  vars:
    clone_directory: "{{ clone_dir | default('~/LME') }}"
    install_user: "{{ ansible_user_id }}"
  tasks:

    - name: Update apt cache
      apt:
        update_cache: yes
      become: yes

    - name: Install required packages
      apt:
        name:
          - jq
          - uidmap
          - nix-bin
          - nix-setup-systemd
        state: present
      become: yes

    - name: Add Nix channel
      command: nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
      become: yes

    - name: Update Nix channel
      command: nix-channel --update
      become: yes

    - name: Add user to nix-users group
      user:
        name: "{{ install_user }}"
        groups: nix-users
        append: yes
      become: yes

    - name: Restart Nix daemon
      command: systemctl restart nix-daemon
      become: yes

    - name: Update PATH for Ansible execution
      set_fact:
        ansible_env: "{{ ansible_env | combine({'PATH': ansible_env.PATH ~ ':/nix/var/nix/profiles/default/bin'}) }}"


    - name: Update PATH in user's profile
      lineinfile:
        path: "~/.profile"
        line: 'export PATH=$PATH:/nix/var/nix/profiles/default/bin'
        create: yes

    - name: Update PATH in root's profile 
      lineinfile:
        path: "/root/.profile"
        line: 'export PATH=$PATH:/nix/var/nix/profiles/default/bin'
        create: yes
      become: yes

    - name: Install Podman using Nix 
      command: nix-env -iA nixpkgs.podman
      become: yes
      environment:
        PATH: "{{ ansible_env.PATH }}"

    - name: Set sysctl limits 
      command: "{{ clone_directory }}/scripts/set_sysctl_limits.sh"
      environment:
        NON_ROOT_USER: "{{ install_user }}"
      become: yes

    - name: Link latest podman quadlet
      command: "{{ clone_directory }}/scripts/link_latest_podman_quadlet.sh"
      become: yes

- name: Install Quadlets
  hosts: localhost
  connection: local
  become: no  # Default to no privilege escalation
  vars:
    clone_directory: "{{ clone_dir | default('~/LME') }}"
    install_user: "{{ ansible_user_id }}"
  tasks:
    - name: Enable linger for user
      command: "loginctl enable-linger {{ install_user }}"
      become: yes

    - name: Copy config files /opt/lme/config
      copy:
        src: "{{ clone_directory }}/config/"
        dest: /opt/lme/config/
        owner: "{{ install_user }}"
        group: "{{ install_user }}"
        mode: '0644'
      become: yes

    - name: Create /etc/containers/systemd
      file:
        path: /opt/containers/systemd
        state: directory
        owner: "root"
        group: "root"
        mode: '0744'
      become: yes

    - name: Copy quadlet files to /etc/containers/systemd 
      copy:
        src: "{{ clone_directory }}/quadlet/"
        dest: /etc/containers/systemd/
        owner: "root"
        group: "root"
        mode: '0644'
      become: yes

    - name: copy lme.service to /etc/systemd/system
      copy:
        src: "{{ clone_directory }}/quadlet/lme.service"
        dest: "/etc/systemd/system/lme.service"
        owner: "root"
        group: "root"
        mode: '0644'
      become: yes

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: yes

- name: Setup Containers for root
  hosts: localhost
  connection: local
  become: no  # Default to no privilege escalation
  vars:
    clone_directory: "{{ clone_dir | default('~/LME') }}"
  tasks:

    - name: Add Container Image policy file
      copy:
        content: |
          {
              "default": [
                  {
                      "type": "insecureAcceptAnything"
                  }
              ]
          }
        dest: /etc/containers/policy.json
      become: yes

    - name: Pull containers
      command: "podman pull {{ item }}"
      loop: "{{ lookup('file', clone_directory + '/config/containers.txt').splitlines() }}"
      environment:
        PATH: "{{ ansible_env.PATH }}"
      become: yes

    - name: Tag containers
      command: "podman image tag {{ item }} {{ item.split('/')[-1].split(':')[0] }}:LME_LATEST"
      loop: "{{ lookup('file', clone_directory + '/config/containers.txt').splitlines() }}"
      environment:
        PATH: "{{ ansible_env.PATH }}"
      become: yes

- name: Start lme.service
  hosts: localhost
  connection: local
  become: yes  # Default to no privilege escalation
  tasks:
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: yes

    - name: Start LME service
      systemd:
        name: lme.service
        state: started
        enabled: yes
      become: yes
